(******************************************************************************)
(* Exercise 13.10.1                                                           *)
(******************************************************************************)

(******************************************************************************)
(* Part A: forward proof                                                      *)
(******************************************************************************)

val aclExercise1=
let
val th1 = ACL_ASSUM term1;
val th2 = ACL_ASSUM term2;
val th3 = ACL_CONJ th1 th2;
val th4 = AND_SAYS_RL th3;
val th5 = DISCH(hd(hyp th2)) th4;
in
 DISCH(hd(hyp th1)) th5
end;

val _=save_thm("aclExercise1",aclExercise1)


(******************************************************************************)
(* Part B: Goal-oriented proof                                              *)
(******************************************************************************)

val aclExercise1A=
TAC_PROOF(
([],
``((M :(commands, 'b, staff, 'd, 'e) Kripke),(Oi :'d po),(Os :'e po)) sat
   Name Alice says (prop go) ==>
  (M,Oi,Os) sat Name Bob says (prop go) ==>
  (M,Oi,Os) sat Name Alice meet Name Bob says (prop go)``)
,
PROVE_TAC[Conjunction,And_Says_Eq])

val _ = save_thm("aclExercise1A",aclExercise1A)

(******************************************************************************)
(* Part C: Goal-oriented proof                                              *)
(******************************************************************************)

val aclExercise1B=
TAC_PROOF(([],
``((M :(commands, 'b, staff, 'd, 'e) Kripke),(Oi :'d po),(Os :'e po)) sat
   Name Alice says (prop go) ==>
  (M,Oi,Os) sat Name Bob says (prop go) ==>
  (M,Oi,Os) sat Name Alice meet Name Bob says (prop go)``)
  ,
 REPEAT STRIP_TAC THEN
 ACL_AND_SAYS_RL_TAC THEN
 ACL_CONJ_TAC THEN
PROVE_TAC[] THEN
PROVE_TAC[])

val _ = save_thm("aclExercise1B", aclExercise1B)