---------------------------------------------------------------------
       HOL-4 [Kananaskis 11 (stdknl, built Sat Aug 19 09:30:06 2017)]

       For introductory HOL help, type: help "hol";
       To exit type <Control>-D
---------------------------------------------------------------------
> # # <<HOL message: Defined type: "commands">>
> # # <<HOL message: Defined type: "people">>
> # # <<HOL message: Defined type: "roles">>
> # # <<HOL message: Defined type: "keyPrinc">>
> # # <<HOL message: Defined type: "principals">>
> val OpRuleLaunch_thm =
    []
|- (M,Oi,Os) sat Name (PR (Role Commander)) controls prop go ==>
   (M,Oi,Os) sat
   reps (Name (PR (Staff Alice))) (Name (PR (Role Commander)))
     (prop go) ==>
   (M,Oi,Os) sat
   Name (Key (Staff Alice)) quoting Name (PR (Role Commander)) says
   prop go ==>
   (M,Oi,Os) sat prop go impf prop launch ==>
   (M,Oi,Os) sat Name (Key (Role CA)) speaks_for Name (PR (Role CA)) ==>
   (M,Oi,Os) sat
   Name (Key (Role CA)) says
   Name (Key (Staff Alice)) speaks_for Name (PR (Staff Alice)) ==>
   (M,Oi,Os) sat
   Name (PR (Role CA)) controls
   Name (Key (Staff Alice)) speaks_for Name (PR (Staff Alice)) ==>
   (M,Oi,Os) sat
   Name (Key (Staff Bob)) quoting Name (PR (Role Operator)) says
   prop launch:
   thm
val it = (): unit
> 
*** Emacs/HOL command completed ***

> val OpRuleAbort_thm =
   
[(M,Oi,Os) sat
 Name (PR (Role CA)) controls
 Name (Key (Staff Alice)) speaks_for Name (PR (Staff Alice))]
|- (M,Oi,Os) sat Name (PR (Role Commander)) controls prop nogo ==>
   (M,Oi,Os) sat
   reps (Name (PR (Staff Alice))) (Name (PR (Role Commander)))
     (prop nogo) ==>
   (M,Oi,Os) sat
   Name (Key (Staff Alice)) quoting Name (PR (Role Commander)) says
   prop nogo ==>
   (M,Oi,Os) sat prop nogo impf prop abort ==>
   (M,Oi,Os) sat Name (Key (Role CA)) speaks_for Name (PR (Role CA)) ==>
   (M,Oi,Os) sat
   Name (Key (Role CA)) says
   Name (Key (Staff Alice)) speaks_for Name (PR (Staff Alice)) ==>
   (M,Oi,Os) sat
   Name (Key (Staff Bob)) quoting Name (PR (Role Operator)) says
   prop abort:
   thm
val it = (): unit
> 
*** Emacs/HOL command completed ***

> val ApRuleActivate_thm =
    []
|- (M,Oi,Os) sat Name (PR (Role Operator)) controls prop launch ==>
   (M,Oi,Os) sat
   reps (Name (PR (Staff Bob))) (Name (PR (Role Operator)))
     (prop launch) ==>
   (M,Oi,Os) sat
   Name (Key (Staff Bob)) quoting Name (PR (Role Operator)) says
   prop launch ==>
   (M,Oi,Os) sat prop launch impf prop activate ==>
   (M,Oi,Os) sat Name (Key (Role CA)) speaks_for Name (PR (Role CA)) ==>
   (M,Oi,Os) sat
   Name (Key (Role CA)) says
   Name (Key (Staff Bob)) speaks_for Name (PR (Staff Bob)) ==>
   (M,Oi,Os) sat
   Name (PR (Role CA)) controls
   Name (Key (Staff Bob)) speaks_for Name (PR (Staff Bob)) ==>
   (M,Oi,Os) sat prop activate:
   thm
val it = (): unit
> 
*** Emacs/HOL command completed ***

> val ApRuleStandDown_thm =
    []
|- (M,Oi,Os) sat Name (PR (Role Operator)) controls prop abort ==>
   (M,Oi,Os) sat
   reps (Name (PR (Staff Bob))) (Name (PR (Role Operator)))
     (prop abort) ==>
   (M,Oi,Os) sat
   Name (Key (Staff Bob)) quoting Name (PR (Role Operator)) says
   prop abort ==>
   (M,Oi,Os) sat prop abort impf prop stand_down ==>
   (M,Oi,Os) sat Name (Key (Role CA)) speaks_for Name (PR (Role CA)) ==>
   (M,Oi,Os) sat
   Name (Key (Role CA)) says
   Name (Key (Staff Bob)) speaks_for Name (PR (Staff Bob)) ==>
   (M,Oi,Os) sat
   Name (PR (Role CA)) controls
   Name (Key (Staff Bob)) speaks_for Name (PR (Staff Bob)) ==>
   (M,Oi,Os) sat prop stand_down:
   thm
val it = (): unit
> 
*** Emacs/HOL command completed ***