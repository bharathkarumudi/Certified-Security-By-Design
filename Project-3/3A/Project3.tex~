\documentclass{report}
\title{Project 3A}
\author{Bharath Karumudi}
\date{\today}

%%........................................%%
%% Loading the Packages 
%%........................................%%
\usepackage{634format}
\usepackage{enumerate}
\usepackage{listings}
\usepackage{amsmath}
\usepackage{hyperref}
\usepackage{holtex}
\usepackage{holtexbasic}
\usepackage{amssymb}
\input{commands}
%.........................................%%
%.........................................%%

\begin{document}
 \lstset{language=ML}
 \maketitle{}

 \begin{abstract}
   This project is to demonstrate the capabilities of functional
   programming using the tools and techniques - \LaTeX{}, AcuTeX,
   emacs and ML. Each chapter documents the given problems with a
   structure of:
   \begin{enumerate}
   \item Problem Statement
   \item Relevant Code
   \item Test Cases
   \item Execution Transcripts
   \item Explanation of results
   \end{enumerate}

 \end{abstract}


 \begin{acknowledgments}
  Professor Marvine Hamner and Professor Shiu-Kai Chin who taught the
  Certified Security By Design.
 \end{acknowledgments}

 \tableofcontents{}

 \chapter{Executive Summary}
 \label{cha:executive-summary}

\textbf{All the requirements for this project are statisfied specifically,}

\begin{description}
\item[Contents] \ \\
Our report has the following content:
\begin{enumerate}
 \item Chapter~\ref{cha:executive-summary}: Executive Summary
 \item Chapter~\ref{cha:exercise-7.3.1} Exercise 7.3.1
   \begin{enumerate}
    \item Section~\ref{sec:problem-statement-1} Problem Statement
    \item Section~\ref{sec:relevant-code-1} Relevant Code
     \item Section~\ref{sec:test-cases-1} Test Cases
    \item Section~\ref{sec:exec-transcr-1} Execution Transcripts
    \item Section~\ref{sec:explanation-results-1} Explanation of Results
   \end{enumerate}
 \item Chapter~\ref{cha:exercise-7.3.2} Exercise 7.3.2
   \begin{enumerate}
    \item Section~\ref{sec:problem-statement-2} Problem Statement
    \item Section~\ref{sec:relevant-code-2} Relevant Code
     \item Section~\ref{sec:test-cases-2} Test Cases
    \item Section~\ref{sec:exec-transcr-2} Execution Transcripts
    \item Section~\ref{sec:explanation-results-2} Explanation of Results
   \end{enumerate}
 \item Chapter~\ref{cha:exercise-7.3.3} Exercise 7.3.3
   \begin{enumerate}
    \item Section~\ref{sec:problem-statement-3} Problem Statement
    \item Section~\ref{sec:relevant-code-3} Relevant Code
    \item Section~\ref{sec:exec-transcr-3} Execution Transcripts
    \item Section~\ref{sec:explanation-results-3} Explanation of Results
   \end{enumerate}
\end{enumerate}
\item[Reproducibility in ML and \LaTeX{}] \ \\
 Our ML and \LaTeX{} source files compile with no errors.
\end{description}



%%------ Exercise 7.3.1 -------%%

 \chapter{Exercise 7.3.1}
 \label{cha:exercise-7.3.1}
  
 \section{Problem Statement}
 \label{sec:problem-statement-1}

In this exercise we need to create a function \emph{andImp2Imp term}, which will take:
\begin{align*}
p\wedge q \subset r
\end{align*}

and results to:
\begin{align*}
p \subset q \subset r;
\end{align*}

\section{Relevant Code}
\label{sec:relevant-code-1}
 \lstset{frameround=fftt}
\begin{lstlisting}[frame=tRBL]

fun andImp2Imp term =
let
 val(conjTerm,r)= dest_imp(term)
 val(p,q) = dest_conj(conjTerm)
in
  mk_imp(p,(mk_imp(q,r)))
end;

\end{lstlisting}

\section{Test Cases}
\label{sec:test-cases-1}

The required test cases are:
\begin{lstlisting}[frame = tRBL ]
andImp2Imp ``(p/\q) ==> r``
\end{lstlisting}

\section{Execution Transcripts}
\label{sec:exec-transcr-1}

\setcounter{sessioncount}{0}
\begin{session}
  \begin{scriptsize}
\begin{verbatim}

---------------------------------------------------------------------
       HOL-4 [Kananaskis 11 (stdknl, built Sat Aug 19 09:30:06 2017)]

       For introductory HOL help, type: help "hol";
       To exit type <Control>-D
---------------------------------------------------------------------
> > > > # # # # # # # # # ** types trace now on
> *** Globals.show_assums now true ***
> # # # # # # # # # ** Unicode trace now off
> 
> # # # # # # # val andImp2Imp = fn: term -> term
> > 
> 
> andImp2Imp ``(p/\q) ==> r``;
val it =
   ``(p :bool) ==> (q :bool) ==> (r :bool)``:
   term
> 
\end{verbatim}
  \end{scriptsize}
\end{session}

\subsection{Explanation of Results}
\label{sec:explanation-results-1}
The above test results shows the test case has been passed.

%%---- Exercise 7.3.2 -----%

\chapter{Exercise 7.3.2}
\label{cha:exercise-7.3.2}

\section{Problem Statement}
\label{sec:problem-statement-2}
In this exercise, we have to create \emph{andImp2Imp term}, which takes the term 
\begin{align*}
p \subset q \subset r;
\end{align*}

and results to:
\begin{align*}
p\wedge q \subset r
\end{align*} and also should act as a reverse function for 7.3.1

\section{Relevant Code}
\label{sec:relevant-code-2}

\lstset{frameround=tttt}
\begin{lstlisting}[frame=tRBL]
(**** 7.3.1 ****)
fun andImp2Imp term =
let
 val(conjTerm,r)= dest_imp(term)
 val(p,q) = dest_conj(conjTerm)
 
in
  mk_imp(p,(mk_imp(q,r)))
end;

(**** 7.3.2 ****)
fun impImpAnd term =
let

 val(term1,imp) = dest_imp(term)
 val(term2, term3) = dest_imp(imp)
 val new_conj = mk_conj(term1, term2)
in
 mk_imp(new_conj,term3)
end;
\end{lstlisting}

\section{Test Cases}
\label{sec:test-cases-2}

The required test cases are:
\begin{lstlisting}[frame = tRBL ]
andImp2Imp ``(p/\q) ==> r``
impImpAnd ``p ==> q ==> r``;
impImpAnd(andImp2Imp ``(p/\q) ==> r``);
andImp2Imp(impImpAnd ``p==>q==>r``);
\end{lstlisting}


\section{Execution Transcripts}
\label{sec:exec-transcr-2}

\setcounter{sessioncount}{0}
\begin{session}
  \begin{scriptsize}
\begin{verbatim}

---------------------------------------------------------------------
       HOL-4 [Kananaskis 11 (stdknl, built Sat Aug 19 09:30:06 2017)]

       For introductory HOL help, type: help "hol";
       To exit type <Control>-D
---------------------------------------------------------------------
> > > > 
> # # # # # # # # # ** types trace now on
> *** Globals.show_assums now true ***
> # # # # # # # # # ** Unicode trace now off
> 
> # # # # # # # val andImp2Imp = fn: term -> term
> # # # # # # # # val impImpAnd = fn: term -> term
> > 
> val it =
   ``(p :bool) ==> (q :bool) ==> (r :bool)``:
   term
> val it =
   ``(p :bool) /\ (q :bool) ==> (r :bool)``:
   term
> val it =
   ``(p :bool) /\ (q :bool) ==> (r :bool)``:
   term
> val it =
   ``(p :bool) ==> (q :bool) ==> (r :bool)``:
   term
> 
\end{verbatim}
  \end{scriptsize}
\end{session}

\subsection{Explanation of Results}
\label{sec:explanation-results-2}

The above transcript shows the given test cases has been passed.


%%---- Exercise 7.3.3 -----%

\chapter{Exercise 7.3.3}
\label{cha:exercise-7.3.3}

\section{Problem Statement}
\label{sec:problem-statement-3}
In this exercise we have to create a function \emph{notExists term} which takes the term  $\neg \exists x.P(x)$ and returns $\forall x.\neg P(x)$.

\section{Relevant Code}
\label{sec:relevant-code-3}

\lstset{frameround=tttt}
\begin{lstlisting}[frame=tRBL]
fun notExists term =
let 
 val (t1, t2) = dest_exists(dest_neg(term))
in
 mk_forall(t1,t2)
end;

\end{lstlisting}

\section{Test Cases}
\label{sec:test-cases-3}

The required test cases are:
\begin{lstlisting}[frame = tRBL ]
notExists ``~?z.Q z``;
\end{lstlisting}


\section{Execution Transcripts}
\label{sec:exec-transcr-3}

\setcounter{sessioncount}{0}
\begin{session}
  \begin{scriptsize}
\begin{verbatim}

---------------------------------------------------------------------
       HOL-4 [Kananaskis 11 (stdknl, built Sat Aug 19 09:30:06 2017)]

       For introductory HOL help, type: help "hol";
       To exit type <Control>-D
---------------------------------------------------------------------
> > > > 
> 
> # # # # # # # # # ** types trace now on
> *** Globals.show_assums now true ***
> # # # # # # # # # ** Unicode trace now off
> 
> # # # # # val notExists = fn: term -> term
> > 
> <<HOL message: inventing new type variable names: 'a>>
val it =
   ``!(z :'a). (Q :'a -> bool) z``:
   term
> 

\end{verbatim}
  \end{scriptsize}
\end{session}

\subsection{Explanation of Results}
\label{sec:explanation-results-3}

The above transcript shows the given tests has been passed.


\chapter{Appendix A: Exercise 7.3.1}
\label{cha:appendix-a:-exercise731}

The following code is from the file ex-7-3-1.sml.
\lstinputlisting{ML/ex-7-3-1.sml}

\chapter{Appendix B: Exercise 7.3.2}
\label{cha:appendix-a:-exercise732}

The following code is from the file  ex-7-3-2.sml.
\lstinputlisting{ML/ex-7-3-2.sml}

\chapter{Appendix C: Exercise 7.3.3}
\label{cha:appendix-a:-exercise733}

The following code is from the file  ex-7-3-3.sml.
\lstinputlisting{ML/ex-7-3-3.sml}

\end{document}